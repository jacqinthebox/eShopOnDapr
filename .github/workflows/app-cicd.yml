name: app-cicd

on:
  workflow_call:
    inputs:
      SERVICE:
        required: true
        type: string
      IMAGE_TAG_NAME:
        required: true
        type: string
      BUILD_PATH:
        required: false
        type: string
      CSPROJ_FILE:
        required: false
        type: string
      BUILD_DOTNET:
        required: true
        type: boolean
    secrets:
      REGISTRY_ENDPOINT:
        required: true
      USERNAME:
        required: true
      PASSWORD:
        required: true
      AZURE_CREDENTIALS:
        required: true
 
env:
  DOTNET_VERSION: 6.0.x
  USE_DOTNET_PREVIEW: true
  ACR_NAME: demo01cr
  ENVIRONMENT: kube-dev-a #TODO

jobs:
  build-containeres-for-pr-linux:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:    
    - name: Checkout repo for version control (do not use shallow checkout or define depth)
      uses: actions/checkout@v1

    - name: Get SemVer1 version using Nerdbank git versioning
      uses: dotnet/nbgv@master
      with:
        setAllVars: true

    - run: echo "NBGV_SemVer1 $NBGV_SemVer1"

    - name: Setup dotnet
      if: ${{ inputs.BUILD_DOTNET }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.USE_DOTNET_PREVIEW }}

    - name: Build
      if: ${{ inputs.BUILD_DOTNET }}
      run: |
        dotnet restore "${{ inputs.BUILD_PATH }}/${{ inputs.CSPROJ_FILE }}.csproj"
        cd ${{ inputs.BUILD_PATH }}
        dotnet build --no-restore

    - name: Enable experimental features for the Docker daemon and CLI
      run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'

    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_ENDPOINT }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}

    - name: Compose build ${{ inputs.SERVICE }}
      run: sudo -E docker-compose build ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        TAG: ${{ env.NBGV_SemVer1 }}
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}

    - name: Compose push ${{ inputs.SERVICE }}
      run: sudo -E docker-compose push ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}
        TAG: ${{ env.NBGV_SemVer1 }}

  build-linux:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
    - name: Checkout Github action
      uses: actions/checkout@master

    - name: Setup dotnet
      if: ${{ inputs.BUILD_DOTNET }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.USE_DOTNET_PREVIEW }}

    - name: Build
      if: ${{ inputs.BUILD_DOTNET }}
      run: |
        dotnet restore "${{ inputs.BUILD_PATH }}/${{ inputs.CSPROJ_FILE }}.csproj"
        cd ${{ inputs.BUILD_PATH }}
        dotnet build --no-restore

    - name: Enable experimental features for the Docker daemon and CLI
      run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'

    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_ENDPOINT }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}

    - name: Compose build ${{ inputs.SERVICE }}:${{ github.sha }}
      run: sudo -E docker-compose build ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}
        TAG: ${{ github.sha }}

    - name: Compose push ${{ inputs.SERVICE }}:${{ github.sha }}
      run: sudo -E docker-compose push ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}
        TAG: ${{ github.sha }}

    - name: Compose build ${{ inputs.SERVICE }}:latest
      run: sudo -E docker-compose build ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}
        TAG: latest

    - name: Compose push ${{ inputs.SERVICE }}:latest
      run: sudo -E docker-compose push ${{ inputs.SERVICE }}
      working-directory: ./src
      shell: bash
      env:
        REGISTRY: ${{ secrets.REGISTRY_ENDPOINT }}
        TAG: latest

  build-and-deploy-helm-charts:
    needs: [ build-linux ]
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    name: build, push and deploy Helm chart
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repo for version control (do not use shallow checkout or define depth)
        uses: actions/checkout@v1

      - name: Get SemVer2 version using Nerdbank git versioning
        uses: dotnet/nbgv@master
        with:
          setAllVars: true

      - name: Install Helm
        uses: Azure/setup-helm@v1
      
      - name: Login to ACR using Helm
        run: |
          echo $ | helm registry login  ${{ env.ACR_NAME }}.azurecr.io --username ${{ secrets.USERNAME }} --password ${{ secrets.PASSWORD }}
      
      - name: Save Helm chart to local registry
        run: |
          helm package deploy/charts/eshop --version $NBGV_SemVer2
            
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.ENVIRONMENT }}-cluster-rg
          cluster-name: ${{ env.ENVIRONMENT }}-cluster
          
      - name: Azure login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Publish eshop chart to ACR
        run: |
          helm push eshopondapr-$NBGV_SemVer2.tgz oci://${{ env.ACR_NAME }}.azurecr.io/helm

      - name: Deploy eshop chart to AKS
        run: |
          echo $ | helm upgrade --install eshop oci://demo01cr.azurecr.io/helm/eshopondapr --version $NBGV_SemVer2 --set ${{ inputs.IMAGE_TAG_NAME }}=${{ github.sha }} -f ./deploy/helm-values/values.${{ env.ENVIRONMENT }}.yaml
