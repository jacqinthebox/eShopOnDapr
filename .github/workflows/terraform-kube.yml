name: kube-cluster
on:
  workflow_dispatch:
    inputs:
      lets-go:
        type: choice
        required: true
        description: Choose what to do
        default: plan
        options:
          - plan
          - apply
          - destroy
          - plumb
      work-dir:
        description: path to tf files, e.g. deploy/terraform/environments/kube-dev
        default: "deploy/terraform/environments/kube-dev"
        required: true
      cluster-prefix:
        description: cluster-prefix or environment name, e.g. kube-dev-a
        default: kube-dev-a
        required: true
      env-short:
        description: short environment name, e.g. dev, tst, prd
        default: dev
        required: true
      namespace:
        default: "eshop"
        description: namespace for eshop
        required: true
      host-name:
        required: true
        default: "dev.eshop"
        description: the hostname part of domain name, e.g. dev.eshop, demo.eshop or prod.eshop
      domain-name:
        default: "boringtestdomain.nl"
        required: false
        description: the domain name
      dns-resourcegroup:
        description: azure dns resource grouo
        required: true
        default: "demo01-rg"
      dns-subscription:
        required: true
        description: subscription name or guid
        default: "demo01"

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_tenant_id: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_prefix: ${{ github.event.inputs.cluster-prefix }}
      TF_VAR_vm_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
      TF_VAR_backend_storage_account_name: ${{ secrets.TF_VAR_BACKEND_STORAGE_ACCOUNT_NAME }}
      TF_VAR_backend_resource_group_name: ${{ secrets.TF_VAR_BACKEND_STORAGE_ACCOUNT_NAME }}
      TF_WORK_DIR: ${{ github.event.inputs.work-dir }}
      TF_STATE_KEY: ${{ github.event.inputs.cluster-prefix }}
      #TF_VAR_nsg_source_address_prefix: ${{ secrets.MY_IP_ADDRESS }}

    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Terraform init
        if: (github.event.inputs.lets-go == 'plan' || github.event.inputs.lets-go == 'apply')
        run: |
          terraform -chdir=$TF_WORK_DIR init \
            -backend-config "resource_group_name=$TF_VAR_backend_resource_group_name" \
            -backend-config "storage_account_name=$TF_VAR_backend_resource_group_name" \
            -backend-config "key=$TF_STATE_KEY" -upgrade

      - name: Terraform plan
        if: github.event.inputs.lets-go == 'plan'
        run: |
          terraform -chdir="$TF_WORK_DIR" plan

        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      - name: Terraform apply
        if: github.event.inputs.lets-go == 'apply'
        run: |
          terraform -chdir=$TF_WORK_DIR apply -auto-approve

      - name: Terraform destroy
        if: github.event.inputs.lets-go == 'destroy'
        run: |
          terraform -chdir="$TF_WORK_DIR" plan
          terraform -chdir=$TF_WORK_DIR init \
          -backend-config "resource_group_name=$TF_VAR_backend_resource_group_name" \
          -backend-config "storage_account_name=$TF_VAR_backend_resource_group_name" \
          -backend-config "key=$TF_STATE_KEY" -upgrade
          terraform -chdir=$TF_WORK_DIR apply -destroy -auto-approve

  plumbing:
    runs-on: ubuntu-latest
    if:  |
      github.event.inputs.lets-go == 'apply' || github.event.inputs.lets-go == 'plumb'
    needs: [terraform]
    env:
      ENVIRONMENT: ${{ github.event.inputs.cluster-prefix }} #kube-dev #this is the cluster prefix #TODO
      ENV_SHORT: ${{ github.event.inputs.env-short }}
      ESHOP_NAMESPACE: ${{ github.event.inputs.namespace }}
      HOST_NAME: ${{ github.event.inputs.host-name }}
      DOMAIN_NAME: ${{ github.event.inputs.domain-name }}
      DNS_RESOURCEGROUP: ${{ github.event.inputs.dns-resourcegroup }}
      DNS_SUBSCRIPTION: ${{ github.event.inputs.dns-subscription }}
    steps:
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.ENVIRONMENT }}-cluster-rg
          cluster-name: ${{ env.ENVIRONMENT }}-cluster

      - name: Get code from the repository
        uses: actions/checkout@v1
        with:
          ref: main

      - name: Helm tool installer
        uses: Azure/setup-helm@v1

      - name: Azure login
        uses: Azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Add Dapr
        run: |
          helm repo add dapr https://dapr.github.io/helm-charts/ && helm repo update
          helm upgrade --install dapr dapr/dapr --namespace dapr-system --create-namespace --wait

      - name: Create namespaces
        run: |
          echo $ | kubectl create ns ${{ env.ESHOP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          echo $ | kubectl create ns monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Add cert-manager
        run: |
          echo $ | kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml

      - name: Add ingress-controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ${{ env.ENVIRONMENT }} ingress-nginx/ingress-nginx --namespace kube-ingress --create-namespace --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz

      - name: Add pod identities
        run: |
          echo "lots of plumbing to get it enabled"
          echo $ | az feature register --name EnablePodIdentityPreview --namespace Microsoft.ContainerService
          echo $ | az extension add --name aks-preview && az extension update --name aks-preview
          echo $ | az aks update -n ${{ github.event.inputs.cluster-prefix }}-cluster -g ${{ github.event.inputs.cluster-prefix }}-cluster-rg --enable-pod-identity
          echo $ | az aks pod-identity add --resource-group ${{ env.ENVIRONMENT }}-cluster-rg --cluster-name ${{ env.ENVIRONMENT }}-cluster --namespace  ${{ env.ESHOP_NAMESPACE }} --name sql-server-identity --identity-resource-id $(az identity show --name ${{ env.ENVIRONMENT }}-sql-server-identity --resource-group ${{ env.ENVIRONMENT }}-cluster-nodes-rg --query id -o tsv)
          echo $ | az aks pod-identity add --resource-group ${{ env.ENVIRONMENT }}-cluster-rg --cluster-name ${{ env.ENVIRONMENT }}-cluster --namespace  ${{ env.ESHOP_NAMESPACE }} --name service-bus-identity --identity-resource-id $(az identity show --name service-bus-identity --resource-group ${{ env.ENVIRONMENT }}-cluster-nodes-rg --query id -o tsv)
          echo $ | az aks pod-identity add --resource-group ${{ env.ENVIRONMENT }}-cluster-rg --cluster-name ${{ env.ENVIRONMENT }}-cluster --namespace  ${{ env.ESHOP_NAMESPACE }} --name key-vault-identity --identity-resource-id $(az identity show --name key-vault-identity --resource-group ${{ env.ENVIRONMENT }}-cluster-nodes-rg --query id -o tsv)

      - name: Add lets-encrypt issuers
        run: |
          echo $ | kubectl apply -f './deploy/cert-manager/staging-issuer.yaml' --namespace ${{ env.ESHOP_NAMESPACE }}
          echo $ | kubectl apply -f './deploy/cert-manager/prod-issuer.yaml' --namespace ${{ env.ESHOP_NAMESPACE }}

      - name: Add Prometheus
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus --namespace monitoring \
            --set server.ingress.enabled=true \
            --set server.ingress.annotations."kubernetes\.io/ingress\.class"="nginx" \
            --set server.ingress.hosts[0]=prometheus.${{ env.ENV_SHORT }}.${{ env.DOMAIN_NAME }}

      - name: Add Grafana
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana --namespace monitoring \
            --set ingress.enabled=true \
            --set ingress.hosts[0]=grafana.${{ env.ENV_SHORT }}.${{ env.DOMAIN_NAME }} \
            --set ingress.annotations."kubernetes\.io/ingress\.class"="nginx" \

      - name: Add kube-state-metrics
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install metrics prometheus-community/kube-state-metrics

      - name: Add DNS records
        run: |
          LOADBALANCER_IP=$(kubectl get service --namespace kube-ingress ${{ env.ENVIRONMENT }}-ingress-nginx-controller  | awk {'print $4'} | tail -1)
          echo $LOADBALANCER_IP
          az account set --subscription ${{ env.DNS_SUBSCRIPTION }}
          az network dns record-set a add-record --resource-group ${{ env.DNS_RESOURCEGROUP }} --zone-name ${{ env.DOMAIN_NAME }} --record-set-name ${{ env.HOST_NAME }} --ipv4-address $LOADBALANCER_IP --ttl 60
          az network dns record-set a add-record --resource-group ${{ env.DNS_RESOURCEGROUP }} --zone-name ${{ env.DOMAIN_NAME }} --record-set-name prometheus.${{ env.ENV_SHORT }} --ipv4-address $LOADBALANCER_IP --ttl 60
          az network dns record-set a add-record --resource-group ${{ env.DNS_RESOURCEGROUP }} --zone-name ${{ env.DOMAIN_NAME }} --record-set-name grafana.${{ env.ENV_SHORT }} --ipv4-address $LOADBALANCER_IP --ttl 60
