---
# Source: eshopondapr/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: eshop-secrets
  namespace: eshop
type: Opaque
data:
  # Secrets are BASE64 encoded
  # Connection strings are temporarily injected using environment variables
  # while waiting for https://github.com/dapr/dotnet-sdk/issues/779 to get fixed.
  #ConnectionStrings.CatalogDB: U2VydmVyPXNxbGRhdGE7RGF0YWJhc2U9TWljcm9zb2Z0LmVTaG9wT25EYXByLlNlcnZpY2VzLkNhdGFsb2dEYjtVc2VyIElkPXNhO1Bhc3N3b3JkPVBhc3NAd29yZDtUcnVzdFNlcnZlckNlcnRpZmljYXRlPXRydWUK
  #ConnectionStrings.IdentityDB: U2VydmVyPXNxbGRhdGE7RGF0YWJhc2U9TWljcm9zb2Z0LmVTaG9wT25EYXByLlNlcnZpY2UuSWRlbnRpdHlEYjtVc2VyIElkPXNhO1Bhc3N3b3JkPVBhc3NAd29yZDtUcnVzdFNlcnZlckNlcnRpZmljYXRlPXRydWUK
  #ConnectionStrings.OrderingDB: U2VydmVyPXNxbGRhdGE7RGF0YWJhc2U9TWljcm9zb2Z0LmVTaG9wT25EYXByLlNlcnZpY2VzLk9yZGVyaW5nRGI7VXNlciBJZD1zYTtQYXNzd29yZD1QYXNzQHdvcmQ7VHJ1c3RTZXJ2ZXJDZXJ0aWZpY2F0ZT10cnVl
  RedisPassword: ZSRoMHAwbkRAcHI=
  SmtpUser: X3VzZXJuYW1l
  SmtpPassword: X3Bhc3N3b3Jk
---
# Source: eshopondapr/templates/apigateway.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-cm
  namespace: eshop
data:
  envoy.yaml: >
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
    static_resources:
      listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 80
          filter_chains:
            - filters:
                - name: envoy.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: eshop_backend_route
                      virtual_hosts:
                        - name: eshop_backend
                          domains:
                            - "*"
                          cors:
                            allow_origin_string_match:
                              - safe_regex:
                                  google_re2: {}
                                  regex: \*
                            allow_methods: "GET, POST, PUT"
                            allow_headers: "authorization, content-type, x-requestid, x-requested-with, x-signalr-user-agent"
                            allow_credentials: true
                          routes:
                            - name: "pics"
                              match:
                                prefix: "/c/pics/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/pics/"
                                cluster: catalog
                            - name: "c-short"
                              match:
                                prefix: "/c/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/catalog-api/method/"
                                cluster: dapr
                            - name: "c-long"
                              match:
                                prefix: "/catalog-api/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/catalog-api/method/"
                                cluster: dapr
                            - name: "o-short"
                              match:
                                prefix: "/o/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/ordering-api/method/"
                                cluster: dapr
                            - name: "o-long"
                              match:
                                prefix: "/ordering-api/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/ordering-api/method/"
                                cluster: dapr
                            - name: "h-long"
                              match:
                                prefix: "/hub/notificationhub"
                              route:
                                auto_host_rewrite: true
                                cluster: ordering-api
                                timeout: 300s
                            - name: "b-short"
                              match:
                                prefix: "/b/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/basket-api/method/"
                                cluster: dapr
                            - name: "b-long"
                              match:
                                prefix: "/basket-api/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/basket-api/method/"
                                cluster: dapr
                            - name: "agg"
                              match:
                                prefix: "/"
                              route:
                                auto_host_rewrite: true
                                prefix_rewrite: "/v1.0/invoke/webshoppingagg/method/"
                                cluster: dapr
                    http_filters:
                      - name: envoy.cors
                      - name: envoy.router
                    access_log:
                      - name: envoy.file_access_log
                        filter:
                          not_health_check_filter: {}
                        config:
                          json_format:
                            time: "%START_TIME%"
                            protocol: "%PROTOCOL%"
                            duration: "%DURATION%"
                            request_method: "%REQ(:METHOD)%"
                            request_host: "%REQ(HOST)%"
                            path: "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%"
                            response_flags: "%RESPONSE_FLAGS%"
                            route_name: "%ROUTE_NAME%"
                            upstream_host: "%UPSTREAM_HOST%"
                            upstream_cluster: "%UPSTREAM_CLUSTER%"
                            upstream_local_address: "%UPSTREAM_LOCAL_ADDRESS%"
                          path: "/tmp/access.log"
      clusters:
        - name: dapr
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          hosts:
            - socket_address:
                address: 127.0.0.1
                port_value: 3500
        - name: catalog
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          hosts:
            - socket_address:
                address: catalog-api
                port_value: 80
        - name: ordering-api
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          hosts:
            - socket_address:
                address: ordering-api
                port_value: 80
---
# Source: eshopondapr/templates/basket.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: basket-cm
  namespace: eshop
  labels:
    app: eshop
    service: basket
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  IdentityUrl: http://identity-api
  IdentityUrlExternal: https://identity-api.eshop.boringtestdomain.nl
  SeqServerUrl: https://seq.eshop.boringtestdomain.nl
---
# Source: eshopondapr/templates/blazorclient.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: blazorclient-cm
  namespace: eshop
  labels:
    app: eshop
    service: blazorclient
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  ApiGatewayUrlExternal: https://webshopping-gw.eshop.boringtestdomain.nl
  IdentityUrlExternal: https://identity-api.eshop.boringtestdomain.nl
---
# Source: eshopondapr/templates/catalog.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: catalog-cm
  namespace: eshop
  labels:
    app: eshop
    service: catalog
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  SeqServerUrl: https://seq.eshop.boringtestdomain.nl
  # Temporarily while waiting for https://github.com/dapr/dotnet-sdk/issues/779 to get fixed.
  ConnectionStrings__CatalogDB: Server=sqldata;Database=Microsoft.eShopOnDapr.Services.CatalogDb;User Id=sa;Password=Pass@word;TrustServerCertificate=true
---
# Source: eshopondapr/templates/identity.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: identity-cm
  namespace: eshop
  labels:
    app: eshop
    service: identity
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  SeqServerUrl: http://seq.eshop.boringtestdomain.nl
  IdentityUrl: https://identity-api.eshop.boringtestdomain.nl
  IdentityUrlExternal: https://identity-api.eshop.boringtestdomain.nl
  BlazorClientUrlExternal: https://blazor-client.eshop.boringtestdomain.nl
  IssuerUrl: https://identity-api.eshop.boringtestdomain.nl
  #BasketApiUrlExternal: http://:30005
  #OrderingApiUrlExternal: http://:30002
  #ShoppingAggregatorApiUrlExternal: http://:30006
  # Temporarily while waiting for https://github.com/dapr/dotnet-sdk/issues/779 to get fixed.
  #ConnectionStrings__IdentityDB: Server=sqldata;Database=Microsoft.eShopOnDapr.Service.IdentityDb;User Id=sa;Password=Pass@word;TrustServerCertificate=true
  ConnectionStrings__IdentityDB: Server=sqldata;Database=Microsoft.eShopOnDapr.Service.IdentityDb;User Id=sa;Password=Pass@word;TrustServerCertificate=true
---
# Source: eshopondapr/templates/ordering.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ordering-cm
  namespace: eshop
  labels:
    app: eshop
    service: ordering
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  IdentityUrl: http://identity-api
  IdentityUrlExternal: https://identity-api.eshop.boringtestdomain.nl
  SeqServerUrl: https://seq.eshop.boringtestdomain.nl
  # Temporarily while waiting for https://github.com/dapr/dotnet-sdk/issues/779 to get fixed.
  ConnectionStrings__OrderingDB: Server=sqldata;Database=Microsoft.eShopOnDapr.Services.OrderingDb;User Id=sa;Password=Pass@word;TrustServerCertificate=true
---
# Source: eshopondapr/templates/payment.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: payment-cm
  namespace: eshop
  labels:
    app: eshop
    service: payment
data:
  ASPNETCORE_ENVIRONMENT: Development
  ASPNETCORE_URLS: http://0.0.0.0:80
  SeqServerUrl: https://seq.eshop.boringtestdomain.nl
---
# Source: eshopondapr/templates/webshoppingagg.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: webshoppingagg-cm
  namespace: eshop
  labels:
    app: eshop
    service: webshoppingagg
data:
  ASPNETCORE_ENVIRONMENT: Development
  IdentityUrl: http://identity-api
  IdentityUrlExternal: https://identity-api.eshop.boringtestdomain.nl
  SeqServerUrl: https://seq.eshop.boringtestdomain.nl
  BasketUrlHC: http://basket-api/hc
  CatalogUrlHC: http://catalog-api/hc
  IdentityUrlHC: http://identity-api/hc
---
# Source: eshopondapr/templates/webstatus.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: webstatus-cm
  namespace: eshop
  labels:
    app: eshop
    service: webstatus
data:
  ASPNETCORE_URLS: http://0.0.0.0:80
  HealthChecksUI__HealthChecks__0__Name: Basket API
  HealthChecksUI__HealthChecks__0__Uri: http://basket-api/hc
  HealthChecksUI__HealthChecks__1__Name: Catalog API
  HealthChecksUI__HealthChecks__1__Uri: http://catalog-api/hc
  HealthChecksUI__HealthChecks__2__Name: Identity API
  HealthChecksUI__HealthChecks__2__Uri: http://identity-api/hc
  HealthChecksUI__HealthChecks__3__Name: Ordering API
  HealthChecksUI__HealthChecks__3__Uri: http://ordering-api/hc
  HealthChecksUI__HealthChecks__4__Name: Payment API
  HealthChecksUI__HealthChecks__4__Uri: http://payment-api/hc
  HealthChecksUI__HealthChecks__5__Name: Web Shopping Aggregator
  HealthChecksUI__HealthChecks__5__Uri: http://webshoppingagg/hc
  HealthChecksUI__HealthChecks__6__Name: Blazor Client
  HealthChecksUI__HealthChecks__6__Uri: http://blazor-client/hc
---
# Source: eshopondapr/templates/apigateway.yaml
kind: Service
apiVersion: v1
metadata:
  name: apigateway
  namespace: eshop
  labels:
    app: eshop
    service: apigateway
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: admin
    - port: 3500
      targetPort: 3500
      protocol: TCP
      name: daprhttp
    - port: 50001
      targetPort: 50001
      protocol: TCP
      name: daprgrpc
  selector:
    service: apigateway
---
# Source: eshopondapr/templates/basket.yaml
apiVersion: v1
kind: Service
metadata:
  name: basket-api
  namespace: eshop
  labels:
    app: eshop
    service: basket
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: basket
---
# Source: eshopondapr/templates/blazorclient.yaml
kind: Service
apiVersion: v1
metadata:
  name: blazor-client
  namespace: eshop
  labels:
    app: eshop
    service: blazorclient
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: blazorclient
---
# Source: eshopondapr/templates/catalog.yaml
kind: Service
apiVersion: v1
metadata:
  name: catalog-api
  namespace: eshop
  labels:
    app: eshop
    service: catalog
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 3500
      targetPort: 3500
      protocol: TCP
      name: dapr-http
    - port: 50001
      targetPort: 50001
      protocol: TCP
      name: dapr-grpc
  selector:
    service: catalog
---
# Source: eshopondapr/templates/identity.yaml
kind: Service
apiVersion: v1
metadata:
  name: identity-api
  namespace: eshop
  labels:
    app: eshop
    service: identity
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: identity
---
# Source: eshopondapr/templates/maildev.yaml
apiVersion: v1
kind: Service
metadata:
  name: mailserver
  namespace: eshop
  labels:
    app: eshop
    service: mailserver
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
    - port: 25
      targetPort: 25
      protocol: TCP
      name: smtp
  selector:
    service: mailserver
---
# Source: eshopondapr/templates/ordering.yaml
apiVersion: v1
kind: Service
metadata:
  name: ordering-api
  namespace: eshop
  labels:
    app: eshop
    service: ordering
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: ordering
---
# Source: eshopondapr/templates/payment.yaml
apiVersion: v1
kind: Service
metadata:
  name: payment-api
  namespace: eshop
  labels:
    app: eshop
    service: payment
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: payment
---
# Source: eshopondapr/templates/rabbitmq.yaml
kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  namespace: eshop
  labels:
    app: eshop
    service: rabbitmq
spec:
  ports:
    - port: 5672
      targetPort: 5672
      protocol: TCP
      name: rabbitmq
  selector:
    service: rabbitmq
---
# Source: eshopondapr/templates/redis.yaml
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: eshop
  labels:
    app: eshop
    service: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
      name: redis
  selector:
    service: redis
---
# Source: eshopondapr/templates/seq.yaml
kind: Service
apiVersion: v1
metadata:
  name: seq
  namespace: eshop
  labels:
    app: eshop
    service: seq
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: seq
---
# Source: eshopondapr/templates/sqldata.yaml
kind: Service
apiVersion: v1
metadata:
  name: sqldata
  namespace: eshop
  labels:
    app: eshop
    service: sqldata
spec:
  ports:
    - port: 1433
      targetPort: 1433
      protocol: TCP
      name: tds
  selector:
    service: sqldata
---
# Source: eshopondapr/templates/webshoppingagg.yaml
apiVersion: v1
kind: Service
metadata:
  name: webshoppingagg
  namespace: eshop
  labels:
    app: eshop
    service: webshoppingagg
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: webshoppingagg
---
# Source: eshopondapr/templates/webstatus.yaml
kind: Service
apiVersion: v1
metadata:
  name: webstatus
  namespace: eshop
  labels:
    app: eshop
    service: webstatus
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    service: webstatus
---
# Source: eshopondapr/templates/zipkin.yaml
kind: Service
apiVersion: v1
metadata:
  name: zipkin
  namespace: eshop
  labels:
    app: eshop
    service: zipkin
spec:
  ports:
    - port: 9411
      targetPort: 9411
      protocol: TCP
      name: zipkin
  selector:
    service: zipkin
---
# Source: eshopondapr/templates/busybox.yaml
# This is a sample pod definition for using SecretProviderClass and aad-pod-identity to access the key vault
kind: Pod
apiVersion: v1
metadata:
  name: busybox-secrets-store-inline-podid
  labels:
    aadpodidbinding: key-vault-identity                   # Set the label value to the name of your pod identity
spec:
  containers:
    - name: busybox
      image: k8s.gcr.io/e2e-test-images/busybox:1.29-1
      command:
        - "/bin/sleep"
        - "10000"
      volumeMounts:
        - name: secrets-store01-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
  volumes:
    - name: secrets-store01-inline
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: "azure-csi-vault-pod-id"
---
# Source: eshopondapr/templates/apigateway.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: apigateway
  namespace: eshop
  labels:
    app: eshop
    service: apigateway
spec:
  replicas: 1
  selector:
    matchLabels:
      service: apigateway
  template:
    metadata:
      labels:
        app: eshop
        service: apigateway
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "apigateway"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
    spec:
      containers:
        - name: apigateway
          image: envoyproxy/envoy:v1.14.2
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: admin
              containerPort: 8001
              protocol: TCP
            - name: daprhttp
              containerPort: 3500
              protocol: TCP
            - name: daprgrpc
              containerPort: 50001
              protocol: TCP
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-cm
---
# Source: eshopondapr/templates/basket.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: basket
  namespace: eshop
  labels:
    app: eshop
    service: basket
spec:
  replicas: 1
  selector:
    matchLabels:
      service: basket
  template:
    metadata:
      labels:
        app: eshop
        service: basket
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "basket-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      containers:
        - name: basket-api
          image: demo01cr.azurecr.io/basket.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: basket-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/blazorclient.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: blazorclient
  namespace: eshop
  labels:
    app: eshop
    service: blazorclient
spec:
  replicas: 1
  selector:
    matchLabels:
      service: blazorclient
  template:
    metadata:
      labels:
        app: eshop
        service: blazorclient
    spec:
      containers:
        - name: blazorclient
          image: demo01cr.azurecr.io/blazor.client:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: blazorclient-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/catalog.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: catalog
  namespace: eshop
  labels:
    app: eshop
    service: catalog
spec:
  replicas: 1
  selector:
    matchLabels:
      service: catalog
  template:
    metadata:
      labels:
        app: eshop
        service: catalog
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "catalog-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      containers:
        - name: catalog-api
          image: demo01cr.azurecr.io/catalog.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              protocol: TCP
            - containerPort: 81
              protocol: TCP
          envFrom:
            - configMapRef:
                name: catalog-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/identity.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: identity
  namespace: eshop
  labels:
    app: eshop
    service: identity
spec:
  replicas: 1
  selector:
    matchLabels:
      service: identity
  template:
    metadata:
      labels:
        app: eshop
        service: identity
        aadpodidbinding: key-vault-identity
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "identity-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      containers:
        - name: identity-api
          image: demo01cr.azurecr.io/identity.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: test
              value: test
          envFrom:
            - configMapRef:
                name: identity-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/maildev.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailserver
  namespace: eshop
  labels:
    app: eshop
    service: mailserver
spec:
  replicas: 1
  selector:
    matchLabels:
      service: mailserver
  template:
    metadata:
      labels:
        app: eshop
        service: mailserver
    spec:
      containers:
        - name: mailserver
          image: maildev/maildev
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: smtp
              containerPort: 25
              protocol: TCP
      restartPolicy: Always
---
# Source: eshopondapr/templates/ordering.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ordering
  namespace: eshop
  labels:
    app: eshop
    service: ordering
spec:
  replicas: 1
  selector:
    matchLabels:
      service: ordering
  template:
    metadata:
      labels:
        app: eshop
        service: ordering
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "ordering-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      containers:
        - name: ordering-api
          image: demo01cr.azurecr.io/ordering.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: ordering-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/payment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: payment
  namespace: eshop
  labels:
    app: eshop
    service: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      service: payment
  template:
    metadata:
      labels:
        app: eshop
        service: payment
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "payment-api"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
        dapr.io/log-as-json: "true"
    spec:
      containers:
        - name: payment-api
          image: demo01cr.azurecr.io/payment.api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: payment-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/rabbitmq.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rabbitmq
  namespace: eshop
  labels:
    app: eshop
    service: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: rabbitmq
  template:
    metadata:
      labels:
        app: eshop
        service: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5672
              protocol: TCP
---
# Source: eshopondapr/templates/redis.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: redis
  namespace: eshop
  labels:
    app: eshop
    service: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: redis
  template:
    metadata:
      labels:
        app: eshop
        service: redis
    spec:
      containers:
        - name: redis
          image: redis:alpine
          imagePullPolicy: IfNotPresent
          args:
            - "--requirepass e$h0p0nD@pr"
          ports:
            - name: http
              containerPort: 6379
              protocol: TCP
---
# Source: eshopondapr/templates/seq.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: seq
  namespace: eshop
  labels:
    app: eshop
    service: seq
spec:
  replicas: 1
  selector:
    matchLabels:
      service: seq
  template:
    metadata:
      labels:
        app: eshop
        service: seq
    spec:
      containers:
        - name: seq
          image: datalust/seq:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: ACCEPT_EULA
              value: "Y"
---
# Source: eshopondapr/templates/sqldata.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: sqldata
  namespace: eshop
  labels:
    app: eshop
    service: sqldata
spec:
  replicas: 1
  selector:
    matchLabels:
      service: sqldata
  template:
    metadata:
      labels:
        app: eshop
        service: sqldata
    spec:
      containers:
        - name: sqldata
          image: mcr.microsoft.com/mssql/server:2017-latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: sqlserver
              containerPort: 1433
              protocol: TCP
          env:
            - name: SA_PASSWORD
              value: Pass@word
            - name: ACCEPT_EULA
              value: "Y"
---
# Source: eshopondapr/templates/webshoppingagg.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: webshoppingagg
  namespace: eshop
  labels:
    app: eshop
    service: webshoppingagg
spec:
  replicas: 1
  selector:
    matchLabels:
      service: webshoppingagg
  template:
    metadata:
      labels:
        app: eshop
        service: webshoppingagg
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "webshoppingagg"
        dapr.io/app-port: "80"
        dapr.io/config: "dapr-config"
    spec:
      containers:
        - name: webshoppingagg
          image: demo01cr.azurecr.io/webshoppingagg:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: webshoppingagg-cm
          readinessProbe:
            httpGet:
              path: /hc
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: eshopondapr/templates/webstatus.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: webstatus
  namespace: eshop
  labels:
    app: eshop
    service: webstatus
spec:
  replicas: 1
  selector:
    matchLabels:
      service: webstatus
  template:
    metadata:
      labels:
        app: eshop
        service: webstatus
    spec:
      containers:
        - name: webstatus
          image: xabarilcoding/healthchecksui:5.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          envFrom:
            - configMapRef:
                name: webstatus-cm
---
# Source: eshopondapr/templates/zipkin.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: zipkin
  namespace: eshop
  labels:
    app: eshop
    service: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      service: zipkin
  template:
    metadata:
      labels:
        app: eshop
        service: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin-slim
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9411
              protocol: TCP
---
# Source: eshopondapr/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-ingress
  namespace: eshop
  annotations:
    app.kubernetes.io/instance: release-name
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/issuer: letsencrypt-staging
spec:
  tls:
    - hosts:
        - webshopping-gw.eshop.boringtestdomain.nl
      secretName: webshopping-gw-tls
    - hosts:
        - identity-api.eshop.boringtestdomain.nl
      secretName: identity-api-tls
    - hosts:
        - blazor-client.eshop.boringtestdomain.nl
      secretName: blazor-client-tls
  rules:
    - host: webshopping-gw.eshop.boringtestdomain.nl
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: apigateway
                port:
                  number: 80
    - host: blazor-client.eshop.boringtestdomain.nl
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: blazor-client
                port:
                  number: 80
    - host: identity-api.eshop.boringtestdomain.nl
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: identity-api
                port:
                  number: 80
---
# Source: eshopondapr/templates/dapr-key-vault.yaml
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: azurekeyvault
spec:
  type: secretstores.azure.keyvault
  version: v1
  metadata:
    - name: vaultName
      value: kube-npd-c-crypt
    - name: spnClientId
      value: bdd1517e-b2b1-46c1-b140-e83dc8fdab54
---
# Source: eshopondapr/templates/dapr-pubsub.yaml
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: pubsub
  namespace: eshop
spec:
  # Temporarily use Redis for pub/sub while waiting for https://github.com/dapr/components-contrib/issues/1372 to be released in 1.6.
  type: pubsub.redis
  #  type: pubsub.rabbitmq
  version: v1
  metadata:
    #- name: host
    #  value: "amqp://rabbitmq:5672"
    #- name: durable
    #  value: "false"
    #- name: deletedWhenUnused
    #  value: "false"
    #- name: autoAck
    #  value: "false"
    #- name: reconnectWait
    #  value: "0"
    #- name: concurrency
    #  value: parallel
    - name: redisHost
      value: redis:6379
    - name: redisPassword
      secretKeyRef:
        name: eshop-secrets
        key: RedisPassword
---
# Source: eshopondapr/templates/dapr-secrets.yaml
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: eshop-secretstore
  namespace: eshop
spec:
  type: secretstores.kubernetes
  version: v1
  metadata:
    - name: ""
---
# Source: eshopondapr/templates/dapr-sendmail.yaml
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: sendmail
  namespace: eshop
spec:
  type: bindings.smtp
  version: v1
  metadata:
    - name: host
      value: mailserver
    - name: port
      value: 25
    - name: user
      secretKeyRef:
        name: eshop-secrets
        key: SmtpUser
    - name: password
      secretKeyRef:
        name: eshop-secrets
        key: SmtpPassword
    - name: skipTLSVerify
      value: true
scopes:
  - ordering-api
---
# Source: eshopondapr/templates/dapr-state.yaml
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: eshop-statestore
  namespace: eshop
spec:
  type: state.redis
  version: v1
  metadata:
    - name: redisHost
      value: redis:6379
    - name: redisPassword
      secretKeyRef:
        name: eshop-secrets
        key: RedisPassword
    - name: actorStateStore
      value: "true"
---
# Source: eshopondapr/templates/dapr-config.yaml
apiVersion: dapr.io/v1alpha1
kind: Configuration
metadata:
  name: dapr-config
  namespace: eshop
spec:
  tracing:
    samplingRate: "1"
    zipkin:
      endpointAddress: "http://zipkin:9411/api/v2/spans"
---
# Source: eshopondapr/templates/azure-csi-secret-provider.yaml
# This is a SecretProviderClass example using aad-pod-identity to access the key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-csi-secret-provider
spec:
  provider: azure
  secretObjects:
    - secretName: sql-connection-string-secret # name given to our kubernetes secret
      type: Opaque
      data:
        - objectName: sql-connection-string # the secret in the keyvault
          key: secret        # this can be called what you want, this is to reference this object. It is easy to always call it secret
    - secretName: azure-sql-connection-string-secret # name given to our kubernetes secret
      type: Opaque
      data:
        - objectName: azure-sql-connection-string # the secret in the keyvault
          key: secret
  parameters:
    usePodIdentity: "true"               # Set to true for using aad-pod-identity to access your key vault
    keyvaultName: kube-npd-c-crypt       # Set to the name of your key vault
    cloudName: ""                        # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: sql-connection-string
          objectType: secret
        - |
          objectName: azure-sb-connection-string
          objectType: secret
        - |
          objectName: azure-sql-connection-string
          objectType: secret
    tenantId: 63060cb1-0960-4615-8769-b110040fa763                # The tenant ID of the key vault
